<?xml version="1.0"?>
<ruleset name="ZendNew">
 <description>The new Zend framework coding standard 
	(according to http://framework.zend.com/manual/en/coding-standard.html).</description>

 <!-- This is basically the PEAR standard with customizations... -->
 <rule ref="PEAR"> 
         <exclude name="PEAR.Commenting.FileComment" />
         <exclude name="PEAR.Commenting.ClassComment" />
         <exclude name="PEAR.Commenting.FunctionComment" />
         <exclude name="PEAR.NamingConventions.ValidVariableName" />
         <exclude name="PEAR.NamingConventions.ValidFunctionName" />
         <exclude name="PEAR.WhiteSpace.ScopeIndent" />
         <exclude name="PEAR.Files.IncludingFile" />
 </rule>

 <!-- ZF coding standard doesn't say anything 
      about version tags other than that they have to exist. -->

 <rule ref="PEAR.Commenting.FileComment.InvalidVersion">
  <severity>0</severity>
 </rule>

 <!-- ZF coding standard doesn't care where the equal-sign is on
      multiple assignments -->

 <rule ref="PEAR.Formatting.MultiLineAssignment.EqualSignLine">
  <severity>0</severity>
 </rule>

 <!-- ZF coding standard doesn't say, that the closing bracket has to
      be on a new line -->

 <rule ref="PEAR.ControlStructures.MultiLineCondition.CloseBracketNewLine">
  <severity>0</severity>
 </rule>

 <!-- ZF coding standard doesn't care about the php-version -->

 <rule ref="ZendNew.Commenting.FileComment.MissingVersion">
  <severity>0</severity>
 </rule>

 <!-- Include some additional sniffs from the Generic standard -->
 <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
 <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
 <rule ref="Generic.PHP.LowerCaseConstant"/>
 <rule ref="Generic.PHP.DisallowShortOpenTag"/>
 <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>
 <rule ref="Generic.WhiteSpace.ScopeIndent"/>

 <!-- Include some additional sniffs from the Squiz standard -->
 <rule ref="Squiz.WhiteSpace.OperatorSpacing"/>

 <!-- TEMPORARILY DISABLE CAMELCAPS SNIFF! -->

 <rule ref="ZendNew.NamingConventions.ValidVariableName.NotCamelCaps">
  <severity>0</severity>
 </rule>

 <rule ref="ZendNew.NamingConventions.ValidVariableName.StringNotCamelCaps">
  <severity>0</severity>
 </rule>

 <rule ref="ZendNew.NamingConventions.ValidVariableName.MemberNotCamelCaps">
  <severity>0</severity>
 </rule>


 <!-- Lines can be 85 chars long, but never show errors -->
 <rule ref="Generic.Files.LineLength">
  <properties>
   <property name="lineLimit" value="120"/>
   <property name="absoluteLineLimit" value="120"/>
  </properties>
 </rule>

 <!-- Use Unix newlines -->
 <rule ref="Generic.Files.LineEndings">
  <properties>
   <property name="eolChar" value="\n"/>
  </properties>
 </rule>

 <!-- This messgae is not required as spaces are allowed for alignment -->
 <rule ref="Generic.Functions.FunctionCallArgumentSpacing.TooMuchSpaceAfterComma">
  <severity>0</severity>
 </rule>

 <!-- Use warnings for inline control structures -->
 <rule ref="Generic.ControlStructures.InlineControlStructure">
  <properties>
   <property name="error" value="false"/>
  </properties>
 </rule>

</ruleset>
